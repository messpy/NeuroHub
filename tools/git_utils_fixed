#!/usr/bin/env bash
# git_utils - git_commit_ai縺ｨ騾｣謳ｺ縺吶ｋ霑ｽ蜉縺ｮgit繝ｦ繝ｼ繝・ぅ繝ｪ繝・ぅ
# ------------------------------------------------------------
# 萓ｿ蛻ｩ縺ｪgit繧ｳ繝槭Φ繝峨・霑ｽ蜉讖溯・:
#  - 繝悶Λ繝ｳ繝√け繝ｪ繝ｼ繝ｳ繧｢繝・・
#  - 繧､繝ｳ繧ｿ繝ｩ繧ｯ繝・ぅ繝睦ebase
#  - 邨ｱ險域ュ蝣ｱ陦ｨ遉ｺ
#  - 繧ｳ繝ｳ繝輔Μ繧ｯ繝郁ｧ｣豎ｺ謾ｯ謠ｴ
# ------------------------------------------------------------

set -euo pipefail
log() { printf '%s\n' "$*" >&2; }

show_help() {
  cat <<EOF
Git Utils - Additional Git Commands

Usage: $0 <command> [options]

COMMANDS:
  cleanup                 繝槭・繧ｸ貂医∩繝悶Λ繝ｳ繝√ｒ蜑企勁
  stats                   繝ｪ繝昴ず繝医Μ邨ｱ險域ュ蝣ｱ繧定｡ｨ遉ｺ
  conflicts               繧ｳ繝ｳ繝輔Μ繧ｯ繝郁ｧ｣豎ｺ謾ｯ謠ｴ
  rebase                  繧､繝ｳ繧ｿ繝ｩ繧ｯ繝・ぅ繝睦ebase謾ｯ謠ｴ
  squash                  隍・焚繧ｳ繝溘ャ繝医ｒ邨ｱ蜷・
  undo                    逶ｴ蜑阪・謫堺ｽ懊ｒ蜿悶ｊ豸医＠
  backup                  迴ｾ蝨ｨ縺ｮ迥ｶ諷九ｒ繝舌ャ繧ｯ繧｢繝・・
  contributors            雋｢迪ｮ閠・ュ蝣ｱ繧定｡ｨ遉ｺ

EXAMPLES:
  $0 cleanup              繝槭・繧ｸ貂医∩繝悶Λ繝ｳ繝∝炎髯､
  $0 stats --detailed     隧ｳ邏ｰ邨ｱ險郁｡ｨ遉ｺ
  $0 conflicts            繧ｳ繝ｳ繝輔Μ繧ｯ繝郁ｧ｣豎ｺ謾ｯ謠ｴ
  $0 squash 3             逶ｴ霑・繧ｳ繝溘ャ繝医ｒ邨ｱ蜷・
EOF
}

# ===== 繝悶Λ繝ｳ繝√け繝ｪ繝ｼ繝ｳ繧｢繝・・ =====
cleanup_branches() {
  local force_mode=false
  [[ "${1:-}" == "--force" ]] && force_mode=true

  echo "=== 繝悶Λ繝ｳ繝√け繝ｪ繝ｼ繝ｳ繧｢繝・・ ==="

  # 繝槭・繧ｸ貂医∩繝悶Λ繝ｳ繝√ｒ讀懷・
  local merged_branches
  mapfile -t merged_branches < <(git branch --merged | grep -v '^\*' | grep -v 'main\|master\|develop' | sed 's/^[ ]*//g' || true)

  if (( ${#merged_branches[@]} == 0 )); then
    echo "蜑企勁蟇ｾ雎｡縺ｮ繝悶Λ繝ｳ繝√・縺ゅｊ縺ｾ縺帙ｓ"
    return 0
  fi

  echo "繝槭・繧ｸ貂医∩繝悶Λ繝ｳ繝・"
  printf '  %s\n' "${merged_branches[@]}"
  echo

  if ! $force_mode; then
    read -r -p "縺薙ｌ繧峨・繝悶Λ繝ｳ繝√ｒ蜑企勁縺励∪縺吶°・・[y/N] " ans
    [[ "${ans,,}" != "y" ]] && return 0
  fi

  for branch in "${merged_branches[@]}"; do
    git branch -d "$branch" && echo "蜑企勁: $branch"
  done
}

# ===== 邨ｱ險域ュ蝣ｱ陦ｨ遉ｺ =====
show_stats() {
  local detailed=false
  [[ "${1:-}" == "--detailed" ]] && detailed=true

  echo "=== 繝ｪ繝昴ず繝医Μ邨ｱ險域ュ蝣ｱ ==="
  echo "繝悶Λ繝ｳ繝∵焚: $(git branch -a | wc -l)"
  echo "邱上さ繝溘ャ繝域焚: $(git rev-list --all --count)"
  echo "繝輔ぃ繧､繝ｫ謨ｰ: $(git ls-files | wc -l)"
  echo "雋｢迪ｮ閠・焚: $(git log --format='%an' | sort -u | wc -l)"
  echo

  echo "--- 譛霑代・繧｢繧ｯ繝・ぅ繝薙ユ繧｣ ---"
  git log --oneline --graph -10
  echo

  if $detailed; then
    echo "--- 繝輔ぃ繧､繝ｫ螟画峩邨ｱ險・---"
    git log --stat --since="1 month ago" | head -50
    echo

    echo "--- 險隱槫挨繝輔ぃ繧､繝ｫ謨ｰ ---"
    git ls-files | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -10
  fi
}

# ===== 繧ｳ繝ｳ繝輔Μ繧ｯ繝郁ｧ｣豎ｺ謾ｯ謠ｴ =====
resolve_conflicts() {
  echo "=== 繧ｳ繝ｳ繝輔Μ繧ｯ繝郁ｧ｣豎ｺ謾ｯ謠ｴ ==="

  # 繧ｳ繝ｳ繝輔Μ繧ｯ繝医ヵ繧｡繧､繝ｫ繧呈､懷・
  local conflict_files
  mapfile -t conflict_files < <(git diff --name-only --diff-filter=U 2>/dev/null || true)

  if (( ${#conflict_files[@]} == 0 )); then
    echo "繧ｳ繝ｳ繝輔Μ繧ｯ繝医・縺ゅｊ縺ｾ縺帙ｓ"
    return 0
  fi

  echo "繧ｳ繝ｳ繝輔Μ繧ｯ繝医ヵ繧｡繧､繝ｫ:"
  printf '  %s\n' "${conflict_files[@]}"
  echo

  for file in "${conflict_files[@]}"; do
    echo "--- $file ---"
    echo "1) 繧ｨ繝・ぅ繧ｿ繝ｼ縺ｧ邱ｨ髮・
    echo "2) theirs迚医ｒ謗｡逕ｨ"
    echo "3) ours迚医ｒ謗｡逕ｨ"
    echo "4) 繧ｹ繧ｭ繝・・"
    read -r -p "驕ｸ謚・[1-4]: " choice

    case "$choice" in
      1)
        "${EDITOR:-nano}" "$file"
        git add "$file"
        ;;
      2)
        git checkout --theirs "$file"
        git add "$file"
        echo "theirs迚医ｒ謗｡逕ｨ: $file"
        ;;
      3)
        git checkout --ours "$file"
        git add "$file"
        echo "ours迚医ｒ謗｡逕ｨ: $file"
        ;;
      4)
        echo "繧ｹ繧ｭ繝・・: $file"
        ;;
      *)
        echo "辟｡蜉ｹ縺ｪ驕ｸ謚・
        ;;
    esac
  done

  echo "繧ｳ繝ｳ繝輔Μ繧ｯ繝郁ｧ｣豎ｺ縺悟ｮ御ｺ・＠縺溘ｉ繧ｳ繝溘ャ繝医＠縺ｦ縺上□縺輔＞・・
  echo "git commit"
}

# ===== 繧､繝ｳ繧ｿ繝ｩ繧ｯ繝・ぅ繝睦ebase =====
interactive_rebase() {
  local commits="${1:-5}"
  echo "=== 繧､繝ｳ繧ｿ繝ｩ繧ｯ繝・ぅ繝睦ebase・育峩霑・{commits}繧ｳ繝溘ャ繝茨ｼ・=="

  git log --oneline -"$commits"
  echo
  read -r -p "縺薙ｌ繧峨・繧ｳ繝溘ャ繝医ｒrebase縺励∪縺吶°・・[y/N] " ans
  [[ "${ans,,}" != "y" ]] && return 0

  git rebase -i "HEAD~$commits"
}

# ===== 繧ｳ繝溘ャ繝育ｵｱ蜷・=====
squash_commits() {
  local count="${1:-2}"
  echo "=== 逶ｴ霑・{count}繧ｳ繝溘ャ繝医ｒ邨ｱ蜷・==="

  git log --oneline -"$count"
  echo
  read -r -p "縺薙ｌ繧峨・繧ｳ繝溘ャ繝医ｒ邨ｱ蜷医＠縺ｾ縺吶°・・[y/N] " ans
  [[ "${ans,,}" != "y" ]] && return 0

  git reset --soft "HEAD~$count"
  echo "邨ｱ蜷亥ｮ御ｺ・よ眠縺励＞繧ｳ繝溘ャ繝医Γ繝・そ繝ｼ繧ｸ繧貞・蜉帙＠縺ｦ縺上□縺輔＞・・
  git commit
}

# ===== 謫堺ｽ懷叙繧頑ｶ医＠ =====
undo_last() {
  echo "=== 逶ｴ蜑阪・謫堺ｽ懊ｒ蜿悶ｊ豸医＠ ==="
  echo "1) 逶ｴ蜑阪・繧ｳ繝溘ャ繝医ｒ蜿悶ｊ豸医＠・医ヵ繧｡繧､繝ｫ縺ｯ菫晄戟・・
  echo "2) 逶ｴ蜑阪・繧ｳ繝溘ャ繝医ｒ螳悟・蜑企勁"
  echo "3) 逶ｴ蜑阪・繝槭・繧ｸ繧貞叙繧頑ｶ医＠"
  echo "4) 繧ｹ繝・・繧ｸ繧偵け繝ｪ繧｢"
  read -r -p "驕ｸ謚・[1-4]: " choice

  case "$choice" in
    1)
      git reset --soft HEAD~1
      echo "逶ｴ蜑阪・繧ｳ繝溘ャ繝医ｒ蜿悶ｊ豸医＠縺ｾ縺励◆・医ヵ繧｡繧､繝ｫ縺ｯ菫晄戟・・
      ;;
    2)
      read -r -p "譛ｬ蠖薙↓蜑企勁縺励∪縺吶°・・[y/N] " ans
      [[ "${ans,,}" == "y" ]] && git reset --hard HEAD~1
      ;;
    3)
      git reset --hard ORIG_HEAD
      echo "逶ｴ蜑阪・繝槭・繧ｸ繧貞叙繧頑ｶ医＠縺ｾ縺励◆"
      ;;
    4)
      git reset
      echo "繧ｹ繝・・繧ｸ繧偵け繝ｪ繧｢縺励∪縺励◆"
      ;;
    *)
      echo "辟｡蜉ｹ縺ｪ驕ｸ謚・
      ;;
  esac
}

# ===== 繝舌ャ繧ｯ繧｢繝・・ =====
backup_state() {
  local backup_branch="backup-$(date +%Y%m%d-%H%M%S)"
  git branch "$backup_branch"
  echo "迴ｾ蝨ｨ縺ｮ迥ｶ諷九ｒ菫晏ｭ倥＠縺ｾ縺励◆: $backup_branch"
}

# ===== 雋｢迪ｮ閠・ュ蝣ｱ =====
show_contributors() {
  echo "=== 雋｢迪ｮ閠・ュ蝣ｱ ==="
  git log --format='%an <%ae>' | sort | uniq -c | sort -nr
  echo
  echo "--- 譛霑代・繧ｳ繝溘ャ繝域ｴｻ蜍・---"
  git log --format='%an: %s' --since="1 week ago"
}

# ===== 繝｡繧､繝ｳ蜃ｦ逅・=====
case "${1:-help}" in
  cleanup)
    cleanup_branches "${2:-}"
    ;;
  stats)
    show_stats "${2:-}"
    ;;
  conflicts)
    resolve_conflicts
    ;;
  rebase)
    interactive_rebase "${2:-}"
    ;;
  squash)
    squash_commits "${2:-}"
    ;;
  undo)
    undo_last
    ;;
  backup)
    backup_state
    ;;
  contributors)
    show_contributors
    ;;
  help|--help|-h|*)
    show_help
    ;;
esac
