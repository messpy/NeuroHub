#!/usr/bin/env bash
# git_utils - git_commit_aiと連携する追加のgitユーティリティ
# ------------------------------------------------------------
# 便利なgitコマンドの追加機能:
#  - ブランチクリーンアップ
#  - インタラクティブrebase
#  - 統計情報表示
#  - コンフリクト解決支援
# ------------------------------------------------------------

set -euo pipefail
log() { printf '%s\n' "$*" >&2; }

show_help() {
  cat <<EOF
Git Utils - Additional Git Commands

Usage: $0 <command> [options]

COMMANDS:
  cleanup                 マージ済みブランチを削除
  stats                   リポジトリ統計情報を表示
  conflicts               コンフリクト解決支援
  rebase                  インタラクティブrebase支援
  squash                  複数コミットを統合
  undo                    直前の操作を取り消し
  backup                  現在の状態をバックアップ
  contributors            貢献者情報を表示

EXAMPLES:
  $0 cleanup              マージ済みブランチ削除
  $0 stats --detailed     詳細統計表示
  $0 conflicts            コンフリクト解決支援
  $0 squash 3             直近3コミットを統合
EOF
}

# ===== ブランチクリーンアップ =====
cleanup_branches() {
  local force_mode=false
  [[ "${1:-}" == "--force" ]] && force_mode=true

  echo "=== ブランチクリーンアップ ==="

  # マージ済みブランチを検出
  local merged_branches
  mapfile -t merged_branches < <(git branch --merged | grep -v '^\*' | grep -v 'main\|master\|develop' | sed 's/^[ ]*//g' || true)

  if (( ${#merged_branches[@]} == 0 )); then
    echo "削除対象のブランチはありません"
    return 0
  fi

  echo "マージ済みブランチ:"
  printf '  %s\n' "${merged_branches[@]}"
  echo

  if ! $force_mode; then
    read -r -p "これらのブランチを削除しますか？ [y/N] " ans
    [[ "${ans,,}" != "y" ]] && return 0
  fi

  for branch in "${merged_branches[@]}"; do
    git branch -d "$branch" && echo "削除: $branch"
  done
}

# ===== 統計情報表示 =====
show_stats() {
  local detailed=false
  [[ "${1:-}" == "--detailed" ]] && detailed=true

  echo "=== リポジトリ統計情報 ==="
  echo "ブランチ数: $(git branch -a | wc -l)"
  echo "総コミット数: $(git rev-list --all --count)"
  echo "ファイル数: $(git ls-files | wc -l)"
  echo "貢献者数: $(git log --format='%an' | sort -u | wc -l)"
  echo

  echo "--- 最近のアクティビティ ---"
  git log --oneline --graph -10
  echo

  if $detailed; then
    echo "--- ファイル変更統計 ---"
    git log --stat --since="1 month ago" | head -50
    echo

    echo "--- 言語別ファイル数 ---"
    git ls-files | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -10
  fi
}

# ===== コンフリクト解決支援 =====
resolve_conflicts() {
  echo "=== コンフリクト解決支援 ==="

  # コンフリクトファイルを検出
  local conflict_files
  mapfile -t conflict_files < <(git diff --name-only --diff-filter=U 2>/dev/null || true)

  if (( ${#conflict_files[@]} == 0 )); then
    echo "コンフリクトはありません"
    return 0
  fi

  echo "コンフリクトファイル:"
  printf '  %s\n' "${conflict_files[@]}"
  echo

  for file in "${conflict_files[@]}"; do
    echo "--- $file ---"
    echo "1) エディターで編集"
    echo "2) theirs版を採用"
    echo "3) ours版を採用"
    echo "4) スキップ"
    read -r -p "選択 [1-4]: " choice

    case "$choice" in
      1)
        "${EDITOR:-nano}" "$file"
        git add "$file"
        ;;
      2)
        git checkout --theirs "$file"
        git add "$file"
        echo "theirs版を採用: $file"
        ;;
      3)
        git checkout --ours "$file"
        git add "$file"
        echo "ours版を採用: $file"
        ;;
      4)
        echo "スキップ: $file"
        ;;
      *)
        echo "無効な選択"
        ;;
    esac
  done

  echo "コンフリクト解決が完了したらコミットしてください："
  echo "git commit"
}

# ===== インタラクティブrebase =====
interactive_rebase() {
  local commits="${1:-5}"
  echo "=== インタラクティブrebase（直近${commits}コミット）==="

  git log --oneline -"$commits"
  echo
  read -r -p "これらのコミットをrebaseしますか？ [y/N] " ans
  [[ "${ans,,}" != "y" ]] && return 0

  git rebase -i "HEAD~$commits"
}

# ===== コミット統合 =====
squash_commits() {
  local count="${1:-2}"
  echo "=== 直近${count}コミットを統合 ==="

  git log --oneline -"$count"
  echo
  read -r -p "これらのコミットを統合しますか？ [y/N] " ans
  [[ "${ans,,}" != "y" ]] && return 0

  git reset --soft "HEAD~$count"
  echo "統合完了。新しいコミットメッセージを入力してください："
  git commit
}

# ===== 操作取り消し =====
undo_last() {
  echo "=== 直前の操作を取り消し ==="
  echo "1) 直前のコミットを取り消し（ファイルは保持）"
  echo "2) 直前のコミットを完全削除"
  echo "3) 直前のマージを取り消し"
  echo "4) ステージをクリア"
  read -r -p "選択 [1-4]: " choice

  case "$choice" in
    1)
      git reset --soft HEAD~1
      echo "直前のコミットを取り消しました（ファイルは保持）"
      ;;
    2)
      read -r -p "本当に削除しますか？ [y/N] " ans
      [[ "${ans,,}" == "y" ]] && git reset --hard HEAD~1
      ;;
    3)
      git reset --hard ORIG_HEAD
      echo "直前のマージを取り消しました"
      ;;
    4)
      git reset
      echo "ステージをクリアしました"
      ;;
    *)
      echo "無効な選択"
      ;;
  esac
}

# ===== バックアップ =====
backup_state() {
  local backup_branch="backup-$(date +%Y%m%d-%H%M%S)"
  git branch "$backup_branch"
  echo "現在の状態を保存しました: $backup_branch"
}

# ===== 貢献者情報 =====
show_contributors() {
  echo "=== 貢献者情報 ==="
  git log --format='%an <%ae>' | sort | uniq -c | sort -nr
  echo
  echo "--- 最近のコミット活動 ---"
  git log --format='%an: %s' --since="1 week ago"
}

# ===== メイン処理 =====
case "${1:-help}" in
  cleanup)
    cleanup_branches "${2:-}"
    ;;
  stats)
    show_stats "${2:-}"
    ;;
  conflicts)
    resolve_conflicts
    ;;
  rebase)
    interactive_rebase "${2:-}"
    ;;
  squash)
    squash_commits "${2:-}"
    ;;
  undo)
    undo_last
    ;;
  backup)
    backup_state
    ;;
  contributors)
    show_contributors
    ;;
  help|--help|-h|*)
    show_help
    ;;
esac
